name: Test

on:
  push:
  workflow_dispatch:
    inputs:
      pdf:
        description: 'Problem labels to build pdf'
        default: ''
      input:
        description: 'Problem labels to build input'
        default: ''
      output:
        description: 'Problem labels to build output'
        default: ''
      solutions:
        description: 'Problem labels to run solutions'
        default: ''

jobs:
  env:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check Github env
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo github.event_name: ${{ github.event_name }}
          echo github.ref: ${{ github.ref }}
          echo github.sha: ${{ github.sha }}
          echo github.event.before: ${{ github.event.before }}
          echo "$GITHUB_CONTEXT"
          pwd

      - name: git log
        run: |
          git log -n 5

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          list-files: 'json'
          filters: |
            any:
              - '**'

      - name: Show changes
        run: |
          echo ${{ steps.changes.outputs.any_files }}

  check-push:
    if: github.event_name == 'push'
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        problem: [A, B, C]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Make flags dir
        run: |
          mkdir -p /home/runner/flags/build-pdf/
          touch /home/runner/flags/build-pdf/.keep
          mkdir -p /home/runner/flags/build-tests/
          touch /home/runner/flags/build-tests/.keep
          mkdir -p /home/runner/flags/build-input/
          touch /home/runner/flags/build-input/.keep
          mkdir -p /home/runner/flags/build-output/
          touch /home/runner/flags/build-output/.keep
          mkdir -p /home/runner/flags/run-solutions/
          touch /home/runner/flags/run-solutions/.keep

      - name: Set env
        id: env
        working-directory: p${{ matrix.problem }}
        run: |
          export model_solution=$(SOLUTIONS_JSON=./solutions.json python3 scripts/internal/get_model_solution.py)
          echo "::set-output name=model_solution::$model_solution"

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          list-files: 'json'
          filters: |
            pdf:
              - p${{ matrix.problem }}/statement/*.jpg
              - p${{ matrix.problem }}/statement/index.md
              - p${{ matrix.problem }}/problem.json
              - template.tex
            cover:
              - cover.tex
            input:
              - p${{ matrix.problem }}/gen/**
            output:
              - p${{ matrix.problem }}/solution/${{ steps.env.outputs.model_solution }}
            solutions:
              - p${{ matrix.problem }}/solution/**

      - name: Show changed files
        env:
          FILES: ${{ toJson(steps.changes.outputs) }}
        run: |
          echo "$FILES"

      - name: Set problem flag
        if: steps.changes.outputs.pdf == 'true' || (matrix.problem == 'A' && steps.changes.outputs.cover == 'true')
        run: |
          echo true > /home/runner/flags/build-pdf/${{ matrix.problem }}

      - name: Set input flag
        if: steps.changes.outputs.input == 'true'
        run: |
          echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
          echo true > /home/runner/flags/build-input/${{ matrix.problem }}

      - name: Set output flag
        if: steps.changes.outputs.output == 'true'
        run: |
          echo true > /home/runner/flags/build-output/${{ matrix.problem }}

      - name: Set solutions flag
        if: steps.changes.outputs.solutions == 'true'
        run: |
          echo true > /home/runner/flags/run-solutions/${{ matrix.problem }}

      - name: Check changes in config
        run: |
          set +e

          git diff ${{ github.event.before }}..HEAD -U0 p${{ matrix.problem }}/problem.json | grep '"contest_name"\|"problem_label"\|"name"\|"title"\|"memory_limit"\|"time_limit"'
          if [ $? -eq 0 ]; then
            echo true > /home/runner/flags/build-pdf/${{ matrix.problem }}
          else
            echo "No changes in problem.json for pdf";
          fi

          git diff ${{ github.event.before }}..HEAD -U0 p${{ matrix.problem }}/problem.json | grep '"time_limit"'
          if [ $? -eq 0 ]; then
            echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
            echo true > /home/runner/flags/run-solutions/${{ matrix.problem }}
          else
            echo "No changes in problem.json for solutions";
          fi

          git diff ${{ github.event.before }}..HEAD -U0 p${{ matrix.problem }}/solutions.json | grep '"model_solution"'
          if [ $? -eq 0 ]; then
            echo true > /home/runner/flags/build-tests/${{ matrix.problem }}
            echo true > /home/runner/flags/build-input/${{ matrix.problem }}
          else
            echo "No changes in solutions.json for input";
          fi

          git diff ${{ github.event.before }}..HEAD -U0 p${{ matrix.problem }}/subtasks.json | grep '"index"\|"score"\|"text"'
          if [ $? -eq 0 ]; then
            echo true > /home/runner/flags/build-pdf/${{ matrix.problem }}
          else
            echo "No changes in subtasks.json for pdf";
          fi

      - name: Upload flags
        uses: actions/upload-artifact@v2
        with:
          name: flags
          path: /home/runner/flags/

  check-manually:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        problem: [A, B, C]

    steps:
      - name: Make flags dir
        run: |
          mkdir -p /home/runner/flags/build-pdf/
          touch /home/runner/flags/build-pdf/.keep
          mkdir -p /home/runner/flags/build-tests/
          touch /home/runner/flags/build-tests/.keep
          mkdir -p /home/runner/flags/build-input/
          touch /home/runner/flags/build-input/.keep
          mkdir -p /home/runner/flags/build-output/
          touch /home/runner/flags/build-output/.keep
          mkdir -p /home/runner/flags/run-solutions/
          touch /home/runner/flags/run-solutions/.keep

      - name: Set problem flag
        if: contains(github.event.inputs.pdf, matrix.problem)
        run: |
          echo true > /home/runner/flags/build-pdf/p${{ matrix.problem }}

      - name: Set input flag
        if: contains(github.event.inputs.input, matrix.problem)
        run: |
          echo true > /home/runner/flags/build-tests/p${{ matrix.problem }}
          echo true > /home/runner/flags/build-input/p${{ matrix.problem }}

      - name: Set output flag
        if: contains(github.event.inputs.output, matrix.problem)
        run: |
          echo true > /home/runner/flags/build-tests/p${{ matrix.problem }}
          echo true > /home/runner/flags/build-output/p${{ matrix.problem }}

      - name: Set solutions flag
        if: contains(github.event.inputs.solutions, matrix.problem)
        run: |
          echo true > /home/runner/flags/build-tests/p${{ matrix.problem }}
          echo true > /home/runner/flags/run-solutions/p${{ matrix.problem }}

      - name: Upload flags
        uses: actions/upload-artifact@v2
        with:
          name: flags
          path: /home/runner/flags/

  check-post:
    needs: [check-push, check-manually]
    if: always()
    runs-on: ubuntu-18.04
    outputs:
      build-pdf: ${{ steps.build-pdf.outputs.build-pdf }}
      build-tests: ${{ steps.build-tests.outputs.build-tests }}
      build-input: ${{ steps.build-input.outputs.build-input }}
      build-output: ${{ steps.build-output.outputs.build-output }}
      run-solutions: ${{ steps.run-solutions.outputs.run-solutions }}

    steps:
      - name: Download flags
        uses: actions/download-artifact@v2
        with:
          name: flags
          path: /home/runner/flags/

      - name: build-pdf
        id: build-pdf
        working-directory: /home/runner/flags/build-pdf/
        run: |
          probs=$(python3 -c 'import json, glob; print(json.dumps(glob.glob("*")))')
          echo $probs
          echo "::set-output name=build-pdf::$probs"

      - name: build-tests
        id: build-tests
        working-directory: /home/runner/flags/build-tests/
        run: |
          probs=$(python3 -c 'import json, glob; print(json.dumps(glob.glob("*")))')
          echo $probs
          echo "::set-output name=build-tests::$probs"

      - name: build-input
        id: build-input
        working-directory: /home/runner/flags/build-input/
        run: |
          probs=$(python3 -c 'import glob; print("".join(glob.glob("*")))')
          echo $probs
          echo "::set-output name=build-input::$probs"

      - name: build-output
        id: build-output
        working-directory: /home/runner/flags/build-output/
        run: |
          probs=$(python3 -c 'import glob; print(json.dumps(glob.glob("*")))')
          echo $probs
          echo "::set-output name=build-output::$probs"

      - name: run-solutions
        id: run-solutions
        working-directory: /home/runner/flags/run-solutions/
        run: |
          probs=$(python3 -c 'import glob; print(json.dumps(glob.glob("*")))')
          echo $probs
          echo "::set-output name=run-solutions::$probs"

  build-pdf:
    if: always() && needs.check-post.outputs.build-pdf != '[]'
    needs: check-post
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        problem: ${{ fromJson(needs.check-post.outputs.build-pdf) }}

    steps:
      - uses: actions/checkout@v2

      # - name: Install tps
      #   run: |
      #     git clone --depth 1 https://github.com/ioi-2017/tps.git
      #     cd tps && sudo ./install-tps.sh
      - name: env
        env:
          NEEDS: ${{ toJson(needs) }}
        run: |
          echo "$NEEDS"

      - name: Build pdf
        working-directory: ${{ matrix.problem }}
        run: |
          echo "Building ${{ matrix.problem }}"

  build-tests:
    if: always() && needs.check-post.outputs.build-tests != '[]'
    needs: check-post
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        problem: ${{ fromJson(needs.check-post.outputs.build-tests) }}

    steps:
      - uses: actions/checkout@v2

      - name: env
        env:
          NEEDS: ${{ toJson(needs) }}
          ENVS: ${{ toJson(env) }}
        run: |
          echo "$NEEDS"
          echo "$ENVS"

      - name: Build input
        if: contains(needs.check-post.outputs.build-input, matrix.problem)
        working-directory: p${{ matrix.problem }}
        run: |
          echo "Building input for ${{ matrix.problem }}"

      - name: Build output
        if: ${{ !contains(needs.check-post.outputs.build-input, matrix.problem) }} && ${{ contains(needs.check-post.outputs.build-output, matrix.problem) }}
        working-directory: p${{ matrix.problem }}
        run: |
          echo "Building output for ${{ matrix.problem }}"

      - name: Check tests changes
        id: tests-changes
        run: |
          set +e

          git diff HEAD --quiet p${{ matrix.problem }}/tests/
          if [ $? -eq 0 ]; then
            echo "::set-output name=changed::true"
            echo "Tests changed"
          else
            echo "No changes in tests";
          fi

      - name: Run solutions
        if: contains(needs.check-post.outputs.run-solutions, matrix.problem) || steps.tests-changes.outputs.changed == 'true'
        working-directory: p${{ matrix.problem }}
        run: |
          echo "Run solutions for ${{ matrix.problem }}"

  # verify:
  #   runs-on: ubuntu-18.04

  #   strategy:
  #     matrix:
  #       problem: [A, B, C]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Install tps
  #       run: |
  #         git clone --depth 1 https://github.com/ioi-2017/tps.git
  #         cd tps && sudo ./install-tps.sh

  #     - name: Verify ${{ matrix.problem }}
  #       working-directory: ${{ matrix.problem }}
  #       run: |
  #         tps verify
