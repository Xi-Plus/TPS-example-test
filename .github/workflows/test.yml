name: Test

on:
  push:
  workflow_dispatch:

jobs:
  env:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check Github env
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo github.event_name: ${{ github.event_name }}
          echo github.ref: ${{ github.ref }}
          echo github.sha: ${{ github.sha }}
          echo github.event.before: ${{ github.event.before }}
          echo "$GITHUB_CONTEXT"
          pwd

      - name: git log
        run: |
          git log -n 5

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          list-files: 'json'
          filters: |
            any:
              - '**'

      - name: Show changes
        run: |
          echo ${{ steps.changes.outputs.any_files }}

  check:
    name: check-${{ matrix.problem }}
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        problem: [pA, pB, pC]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Make flags dir
        run: |
          mkdir -p ~/flags/build-pdf/
          mkdir -p ~/flags/build-tests/
          touch ~/flags/placeholder

      - name: Set env
        id: env
        working-directory: ${{ matrix.problem }}
        run: |
          export model_solution=$(SOLUTIONS_JSON=./solutions.json python3 scripts/internal/get_model_solution.py)
          echo "::set-output name=model_solution::$model_solution"

      - run: |
          echo "${{ matrix.problem }}/solutions/${{ steps.env.outputs.model_solution }}"

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          list-files: 'json'
          filters: |
            pdf:
              - ${{ matrix.problem }}/statement/*.jpg
              - ${{ matrix.problem }}/statement/index.md
              - ${{ matrix.problem }}/problem.json
              - template.tex
            cover:
              - cover.tex
            input:
              - ${{ matrix.problem }}/gen/**
              - ${{ matrix.problem }}/solutions/${{ steps.env.outputs.model_solution }}

      - name: Show changed files
        env:
          FILES: ${{ toJson(steps.changes.outputs) }}
        run: |
          echo "$FILES"

      - name: Set problem flag
        if: steps.changes.outputs.pdf == 'true' || (matrix.problem == 'pA' && steps.changes.outputs.cover == 'true')
        run: |
          echo true > ~/flags/build-pdf/${{ matrix.problem }}

      - name: Set tests flag
        if: steps.changes.outputs.input == 'true'
        run: |
          echo true > ~/flags/build-tests/${{ matrix.problem }}

      - name: Upload flags
        uses: actions/upload-artifact@v2
        with:
          name: flags
          path: ~/flags/

  check-post:
    needs: check
    runs-on: ubuntu-18.04
    outputs:
      build-pdf: ${{ steps.build-pdf.outputs.build-pdf }}
      build-tests: ${{ steps.build-tests.outputs.build-tests }}

    steps:
      - name: Download flags
        uses: actions/download-artifact@v2
        with:
          name: flags
          path: ~/flags/

      - name: build-pdf
        id: build-pdf
        run: |
          probs=$(python3 -c 'import os, json; print(json.dumps(os.listdir(os.path.expanduser("~/flags/build-pdf/"))))')
          echo $probs
          echo "::set-output name=build-pdf::$probs"

      - name: build-pdf outputs
        env:
          OUTPUTS: ${{ toJson(steps.build-pdf.outputs) }}
        run: |
          echo "$OUTPUTS"

      - name: build-tests
        id: build-tests
        run: |
          probs=$(python3 -c 'import os, json; print(json.dumps(os.listdir(os.path.expanduser("~/flags/build-tests/"))))')
          echo $probs
          echo "::set-output name=build-tests::$probs"

      - name: build-tests outputs
        env:
          OUTPUTS: ${{ toJson(steps.build-tests.outputs) }}
        run: |
          echo "$OUTPUTS"

  build-pdf:
    name: build-pdf-${{ matrix.problem }}
    needs: check-post
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        problem: ${{ fromJson(needs.check-post.outputs.build-pdf) }}

    steps:
      - uses: actions/checkout@v2

      # - name: Install tps
      #   run: |
      #     git clone --depth 1 https://github.com/ioi-2017/tps.git
      #     cd tps && sudo ./install-tps.sh
      - name: env
        env:
          NEEDS: ${{ toJson(needs) }}
        run: |
          echo "$NEEDS"

      - name: Build pdf
        working-directory: ${{ matrix.problem }}
        run: |
          echo "Building ${{ matrix.problem }}"

  build-tests:
    name: build-tests-${{ matrix.problem }}
    needs: check-post
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        problem: ${{ fromJson(needs.check-post.outputs.build-tests) }}

    steps:
      - uses: actions/checkout@v2

      - name: env
        env:
          NEEDS: ${{ toJson(needs) }}
        run: |
          echo "$NEEDS"

      - name: Build pdf
        working-directory: ${{ matrix.problem }}
        run: |
          echo "Building ${{ matrix.problem }}"

  # verify:
  #   name: verify-${{ matrix.problem }}
  #   runs-on: ubuntu-18.04

  #   strategy:
  #     matrix:
  #       problem: [pA, pB, pC]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Install tps
  #       run: |
  #         git clone --depth 1 https://github.com/ioi-2017/tps.git
  #         cd tps && sudo ./install-tps.sh

  #     - name: Verify ${{ matrix.problem }}
  #       working-directory: ${{ matrix.problem }}
  #       run: |
  #         tps verify
